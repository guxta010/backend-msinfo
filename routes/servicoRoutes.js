const express = require("express");
const Servico = require("../models/Servico");
const authMiddleware = require("../middlewares/authMiddleware");

const router = express.Router();

// üìå Criar um novo servi√ßo
router.post("/", authMiddleware, async (req, res) => {
  try {
    const { cliente_id, descricao, status, valor } = req.body;

    // üêû Log dos dados recebidos
    console.log("üì• Dados recebidos:", req.body);

    if (!cliente_id || !descricao || !status) {
      console.log("‚ùå Campos obrigat√≥rios faltando");
      return res.status(400).json({ error: "Preencha todos os campos obrigat√≥rios!" });
    }

    const novoServico = await Servico.create({
      cliente_id,
      descricao,
      status,
      valor,
      data_servico: new Date() // ‚úÖ Insere data atual no campo obrigat√≥rio
    });

    console.log("‚úÖ Servi√ßo cadastrado:", novoServico);
    res.status(201).json(novoServico);
  } catch (error) {
    console.error("üî• ERRO AO CADASTRAR SERVI√áO:", error);
    res.status(500).json({ error: "Erro ao cadastrar servi√ßo." });
  }
});

// üìå Listar todos os servi√ßos
router.get("/", authMiddleware, async (req, res) => {
  try {
    const servicos = await Servico.findAll();
    res.json(servicos);
  } catch (error) {
    console.error("üî• ERRO AO BUSCAR SERVI√áOS:", error);
    res.status(500).json({ error: "Erro ao buscar servi√ßos." });
  }
});

// üìå Buscar um servi√ßo por ID
router.get("/:id", authMiddleware, async (req, res) => {
  try {
    const servico = await Servico.findByPk(req.params.id);
    if (!servico) {
      return res.status(404).json({ error: "Servi√ßo n√£o encontrado!" });
    }
    res.json(servico);
  } catch (error) {
    console.error("üî• ERRO AO BUSCAR SERVI√áO:", error);
    res.status(500).json({ error: "Erro ao buscar servi√ßo." });
  }
});

// üìå Atualizar um servi√ßo
router.put("/:id", authMiddleware, async (req, res) => {
  try {
    const { descricao, status, valor } = req.body;
    const servico = await Servico.findByPk(req.params.id);

    if (!servico) {
      return res.status(404).json({ error: "Servi√ßo n√£o encontrado!" });
    }

    servico.descricao = descricao;
    servico.status = status;
    servico.valor = valor;

    await servico.save();
    res.json(servico);
  } catch (error) {
    console.error("üî• ERRO AO ATUALIZAR SERVI√áO:", error);
    res.status(500).json({ error: "Erro ao atualizar servi√ßo." });
  }
});

// üìå Excluir um servi√ßo
router.delete("/:id", authMiddleware, async (req, res) => {
  try {
    const servico = await Servico.findByPk(req.params.id);
    if (!servico) {
      return res.status(404).json({ error: "Servi√ßo n√£o encontrado!" });
    }

    await servico.destroy();
    res.json({ message: "Servi√ßo removido com sucesso!" });
  } catch (error) {
    console.error("üî• ERRO AO EXCLUIR SERVI√áO:", error);
    res.status(500).json({ error: "Erro ao excluir servi√ßo." });
  }
});

module.exports = router;
